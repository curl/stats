#!/usr/bin/perl

require "./stats/tag2date.pm";

sub num {
    my ($t)=@_;
    if($t =~ /^curl-(\d)_(\d+)_(\d+)/) {
        return 10000*$1 + 100*$2 + $3;
    }
    elsif($t =~ /^curl-(\d)_(\d+)/) {
        return 10000*$1 + 100*$2;
    }
}


sub sortthem {
    return num($a) <=> num($b);
}

@alltags= `git tag -l`;

foreach my $t (@alltags) {
    chomp $t;
    if($t =~ /^curl-([0-9_]*[0-9])\z/) {
        push @releases, $t;
    }
}

sub cpyuse {
    my ($tag, $path) = @_;

    # Get source files to count
    my @files;
    open(G, "git ls-tree -r --name-only $tag -- $path 2>/dev/null|");
    while(<G>) {
        chomp;
        if($_ =~ /[ch]\z/) {
            push @files, $_;
        }
    }
    close(G);

    my $cmd;
    for(@files) {
        $cmd .= "$tag:$_ ";
    }

    my $count;
    my $alloc;

    open(G, "git show $cmd 2>/dev/null| grep -E ' strncpy\\('|");
    while(<G>) {
        $count++;
    }
    close(G);

    my $blanks, $comments, $code;
    open(G, "git show $cmd 2>/dev/null| cloc --force-lang=C --csv -|");
    while(<G>) {
        if($_ =~ /^1,SUM,(\d*),(\d*),(\d*)/) {
            ($blanks, $comments, $code)=($1, $2, $3);
            last;
        }
    }
    close(G);

    return ($count, $code);
}

print <<CACHE
2000-03-14;0.622;7
2000-03-21;0.624;7
2000-03-21;0.620;7
2000-08-21;0.809;10
2000-08-30;0.801;10
2000-09-28;0.717;10
2000-10-16;0.697;10
2000-12-04;0.410;6
2001-01-05;0.404;6
2001-01-27;0.451;6
2001-02-13;0.438;6
2001-03-22;0.415;6
2001-04-04;0.414;6
2001-04-23;0.412;6
2001-05-07;0.409;6
2001-06-07;0.404;6
2001-08-20;0.407;6
2001-09-25;0.512;8
2001-11-04;0.613;10
2001-12-05;0.596;10
2002-01-23;0.557;10
2002-02-05;0.556;10
2002-03-07;0.545;10
2002-04-15;0.534;10
2002-05-13;0.523;10
2002-06-13;0.516;10
2002-10-01;0.395;8
2002-10-11;0.394;8
2002-11-18;0.391;8
2003-01-14;0.387;8
2003-04-02;0.414;8
2003-05-19;0.406;8
2003-07-28;0.376;8
2003-08-15;0.365;8
2003-11-01;0.353;8
2004-01-22;0.344;8
2004-03-18;0.326;8
2004-04-26;0.442;11
2004-06-02;0.376;10
2004-08-10;0.301;8
2004-10-18;0.331;9
2004-12-20;0.319;9
2005-02-01;0.316;9
2005-03-04;0.305;9
2005-04-05;0.304;9
2005-05-16;0.296;9
2005-09-01;0.292;9
2005-10-13;0.287;9
2005-12-06;0.284;9
2006-02-27;0.281;9
2006-03-20;0.281;9
2006-06-12;0.266;9
2006-08-07;0.263;9
2006-10-29;0.256;9
2007-01-29;0.272;10
2007-04-11;0.260;10
2007-06-25;0.254;10
2007-07-10;0.251;10
2007-09-13;0.270;11
2007-10-29;0.288;12
2008-01-28;0.283;12
2008-03-30;0.282;12
2008-06-04;0.279;12
2008-09-01;0.320;14
2008-11-05;0.404;18
2008-11-13;0.405;18
2009-01-19;0.359;16
2009-03-02;0.347;16
2009-05-18;0.345;16
2009-08-12;0.405;19
2009-11-04;0.401;19
2010-02-09;0.392;20
2010-04-14;0.388;20
2010-06-16;0.363;20
2010-08-11;0.378;21
2010-10-12;0.376;21
2010-12-15;0.372;21
2011-02-17;0.366;21
2011-04-17;0.361;21
2011-04-22;0.361;21
2011-06-23;0.361;21
2011-09-13;0.341;20
2011-11-14;0.333;20
2011-11-17;0.333;20
2012-01-24;0.329;20
2012-03-22;0.326;20
2012-05-24;0.325;20
2012-07-27;0.337;22
2012-10-10;0.333;22
2012-11-20;0.331;22
2013-02-06;0.329;22
2013-04-12;0.323;22
2013-06-22;0.349;24
2013-08-11;0.352;25
2013-10-13;0.279;20
2013-12-16;0.277;20
2014-01-29;0.275;20
2014-03-26;0.270;20
2014-05-20;0.282;21
2014-07-16;0.280;21
2014-09-10;0.275;21
2014-11-05;0.263;20
2015-01-07;0.255;20
2015-02-25;0.258;20
2015-04-22;0.258;20
2015-04-28;0.258;20
2015-06-17;0.256;20
2015-08-11;0.255;20
2015-10-07;0.255;20
2015-12-01;0.252;20
2016-01-27;0.263;21
2016-02-08;0.275;22
2016-03-23;0.275;22
2016-05-17;0.270;22
2016-05-30;0.270;22
2016-07-21;0.269;22
2016-08-03;0.269;22
2016-09-07;0.268;22
2016-09-14;0.268;22
2016-11-02;0.256;21
2016-12-20;0.263;22
2016-12-22;0.263;22
2017-02-22;0.262;22
2017-02-24;0.262;22
2017-04-19;0.261;22
2017-06-14;0.259;22
2017-08-09;0.259;22
2017-08-13;0.259;22
2017-10-04;0.264;23
2017-10-23;0.263;23
2017-11-29;0.260;23
2018-01-23;0.253;23
2018-03-13;0.252;23
2018-05-15;0.249;23
2018-07-11;0.259;24
2018-09-04;0.258;24
2018-10-30;0.230;22
2018-12-12;0.231;22
2019-02-06;0.230;22
2019-03-27;0.228;22
2019-05-22;0.218;21
2019-06-04;0.218;21
2019-07-17;0.218;21
2019-07-19;0.218;21
2019-09-10;0.211;21
2019-11-05;0.230;23
2020-01-08;0.257;26
2020-03-04;0.264;27
2020-03-11;0.264;27
2020-04-29;0.270;28
2020-06-23;0.248;26
2020-06-30;0.248;26
2020-08-19;0.247;26
2020-10-14;0.246;26
2020-12-09;0.245;26
2021-02-03;0.240;26
2021-03-31;0.239;26
2021-04-14;0.239;26
2021-05-26;0.237;26
2021-07-21;0.238;26
2021-09-14;0.238;26
2021-09-22;0.238;26
2021-11-10;0.236;26
2022-01-05;0.235;26
2022-03-05;0.220;24
2022-04-27;0.226;25
2022-05-11;0.226;25
2022-06-27;0.233;26
2022-08-31;0.241;27
2022-10-26;0.265;30
2022-12-21;0.262;30
2023-02-15;0.253;30
2023-02-20;0.253;30
2023-03-20;0.243;29
2023-03-20;0.244;29
2023-05-17;0.236;29
2023-05-23;0.236;29
2023-05-30;0.236;29
2023-07-19;0.234;29
2023-07-26;0.234;29
2023-09-13;0.237;29
2023-10-11;0.237;29
2023-12-06;0.235;29
2024-01-31;0.056;7
2024-03-27;0.055;7
2024-03-27;0.055;7
2024-05-22;0.046;6
2024-07-24;0.053;7
2024-07-31;0.053;7
2024-09-11;0.037;5
2024-09-18;0.037;5
CACHE
    ;

sub show {
    my ($t, $d) = @_;
    my ($cpy, $code) = cpyuse($t, "lib src");
    printf "$d;%.3f;%u\n", $cpy * 1000 / $code, $cpy;
}

foreach my $t (sort sortthem @releases) {
    if(num($t) <= 81001) {
        next;
    }
    my $d = tag2date($t);
    show($t, $d);
}

$t=`git describe --match "curl*"`;
chomp $t;

my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) =
    localtime(time);
my $d = sprintf "%04d-%02d-%02d", $year + 1900, $mon + 1, $mday;

show($t, $d);
