#!/usr/bin/perl

require "./stats/tag2date.pm";

sub num {
    my ($t)=@_;
    if($t =~ /^curl-(\d)_(\d+)_(\d+)/) {
        return 10000*$1 + 100*$2 + $3;
    }
    elsif($t =~ /^curl-(\d)_(\d+)/) {
        return 10000*$1 + 100*$2;
    }
}

sub sortthem {
    return num($a) <=> num($b);
}

@alltags= `git tag -l`;

foreach my $t (@alltags) {
    chomp $t;
    if($t =~ /^curl-([0-9_]*[0-9])\z/) {
        push @releases, $t;
    }
}

sub median {
    my @a = @_;
    my @vals = sort {$a <=> $b} @a;
    my $len = @vals;
    if($len%2) { #odd?
        return $vals[int($len/2)];
    }
    else {
        #even
        return ($vals[int($len/2)-1] + $vals[int($len/2)])/2;
    }
}

sub p99 {
    my @a = @_;
    my @vals = sort {$b <=> $a} @a;
    my $i = scalar(@vals) * 0.01;
    return $vals[$i];
}

sub p90 {
    my @a = @_;
    my @vals = sort {$b <=> $a} @a;
    my $i = scalar(@vals) * 0.1;
    return $vals[$i];
}

sub worst {
    my @a = @_;
    my @vals = sort {$b <=> $a} @a;
    return $vals[0];
}

sub complexity {
    my ($tag, $path) = @_;

    # Get source files to count
    my @files;
    open(G, "git ls-tree -r --name-only $tag -- $path 2>/dev/null|");
    while(<G>) {
        chomp;
        if($_ =~ /[ch]\z/) {
            push @files, $_;
        }
    }
    close(G);

    my $cmd;
    for(@files) {
        $cmd .= "$tag:$_ ";
    }

    #  Modified McCabe Cyclomatic Complexity
    #  |   Traditional McCabe Cyclomatic Complexity
    #  |       |    # Statements in function
    #  |       |        |   First line of function
    #  |       |        |       |   # lines in function
    #  |       |        |       |       |

    my $score;
    my $funcs;
    my $totlines;

    open(G, "git show $cmd 2>/dev/null| pmccabe 2>/dev/null|");
    while(<G>) {
        if($_ =~ /^(\d+)\t(\d+)\t(\d+)\t(\d+)\t(\d+)/) {
            my ($modmccabe, $mccabe, $statements, $first, $lines)=($1, $2, $3, $4, $5);
            if($modmccabe > 1000) {
                # something is wrong
                #print STDERR $_;
                return 0;
            }
            $score += $modmccabe * $lines;
            $funcs++;
            $totlines += $lines;
        }
    }
    close(G);
    #print STDERR "$score for $totlines\n";
    return $score / $totlines;
}

print <<CACHE
2000-03-14;38.698
2000-03-21;38.481
2000-03-21;38.322
2000-08-21;36.502
2000-08-30;36.545
2000-09-28;36.977
2000-10-16;36.696
2000-12-04;38.629
2001-01-05;38.244
2001-01-27;45.544
2001-02-13;49.409
2001-03-22;48.873
2001-04-04;49.316
2001-04-23;49.435
2001-05-07;49.547
2001-06-07;50.352
2001-08-20;50.096
2001-09-25;47.462
2001-11-04;42.219
2001-12-05;42.551
2002-01-23;41.434
2002-02-05;41.637
2002-03-07;42.017
2002-04-15;42.314
2002-05-13;42.362
2002-06-13;43.621
2002-10-01;44.155
2002-10-11;44.067
2002-11-18;45.413
2003-01-14;45.782
2003-04-02;46.216
2003-05-19;47.078
2003-07-28;48.977
2003-08-15;48.463
2003-11-01;46.237
2004-01-22;46.476
2004-03-18;41.726
2004-04-26;45.682
2004-06-02;46.907
2004-08-10;47.161
2004-10-18;47.794
2004-12-20;48.653
2005-02-01;48.622
2005-03-04;46.491
2005-04-05;46.544
2005-05-16;45.731
2005-09-01;46.374
2005-10-13;46.149
2005-12-06;46.154
2006-02-27;45.982
2006-03-20;45.997
2006-06-12;44.156
2006-08-07;44.226
2006-10-29;42.367
2007-01-29;42.688
2007-04-11;43.066
2007-06-25;42.752
2007-07-10;42.572
2007-09-13;44.223
2007-10-29;45.012
2008-01-28;45.541
2008-03-30;46.427
2008-06-04;46.664
2008-09-01;41.552
2008-11-05;41.524
2008-11-13;41.505
2009-01-19;42.227
2009-03-02;42.278
2009-05-18;42.360
2009-08-12;44.164
2009-11-04;44.681
2010-02-09;43.419
2010-04-14;42.772
2010-06-16;42.549
2010-08-11;42.717
2010-10-12;42.728
2010-12-15;42.993
2011-02-17;42.908
2011-04-17;42.927
2011-04-22;43.399
2013-04-12;45.483
2013-06-22;45.073
2013-08-11;44.711
2013-10-13;45.034
2013-12-16;45.043
2014-01-29;44.983
2014-03-26;43.321
2014-05-20;43.497
2014-07-16;43.477
2014-09-10;43.178
2014-11-05;43.649
2015-01-07;43.238
2015-02-25;44.010
2015-04-22;44.091
2015-04-28;44.130
2015-06-17;44.268
2015-08-11;44.142
2015-10-07;44.356
2015-12-01;44.193
2016-01-27;44.480
2016-02-08;44.377
2016-03-23;44.354
2016-05-17;45.019
2016-05-30;45.002
2016-07-21;45.048
2016-08-03;45.045
2016-09-07;45.023
2016-09-14;45.027
2016-11-02;45.152
2016-12-20;46.634
2016-12-22;46.634
2017-02-22;47.234
2017-02-24;47.376
2017-04-19;46.687
2017-06-14;46.812
2017-08-09;47.265
2017-08-13;47.280
2017-10-04;47.557
2017-10-23;49.411
2017-11-29;49.217
2018-01-23;50.392
2018-03-13;50.447
2018-05-15;50.576
2018-07-11;50.697
2018-09-04;51.220
2018-10-30;50.753
2018-12-12;51.203
2019-02-06;51.233
2019-03-27;51.757
2019-05-22;51.744
2019-06-04;51.741
2019-07-17;51.650
2019-07-19;51.650
2019-09-10;47.406
2019-11-05;47.433
2020-01-08;47.454
2020-03-04;47.602
2020-03-11;47.698
2020-04-29;47.538
2020-06-23;48.591
2020-06-30;48.564
2020-08-19;48.527
2020-10-14;48.947
2020-12-09;48.986
2021-02-03;45.744
2021-03-31;46.161
2021-04-14;46.067
2021-05-26;46.452
2021-07-21;45.850
2021-09-14;45.799
2021-09-22;45.795
2021-11-10;45.969
2022-01-05;45.963
2022-03-05;46.019
2022-04-27;45.940
2022-05-11;45.956
2022-06-27;46.248
2022-08-31;46.471
2022-10-26;45.977
2022-12-21;45.105
2023-02-15;43.943
2023-02-20;43.978
2023-03-20;44.013
2023-03-20;44.012
2023-05-17;42.775
2023-05-23;42.772
2023-05-30;42.860
2023-07-19;42.884
2023-07-26;42.891
2023-09-13;43.565
2023-10-11;43.575
2023-12-06;41.630
2024-01-31;39.425
2024-03-27;38.537
2024-03-27;38.537
2024-05-22;38.962
2024-07-24;38.507
2024-07-31;38.497
2024-09-11;38.764
2024-09-18;38.539
2024-11-06;28.146
2024-12-11;26.565
2025-02-05;26.594
2025-02-13;26.451
2025-04-02;25.786
CACHE
    ;

sub show {
    my ($t, $d) = @_;
    my ($score) = complexity($t, "src lib");
    if($score) {
        printf "$d;%.3f\n", $score;
    }

}

foreach my $t (sort sortthem @releases) {
    if(num($t) <= 81300) {
        next;
    }
    my $d = tag2date($t);
    show($t, $d);
}

$t=`git describe --match "curl*"`;
chomp $t;

my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) =
    localtime(time);
my $d = sprintf "%04d-%02d-%02d", $year + 1900, $mon + 1, $mday;

show($t, $d);
